// Copyright Epic Games, Inc. All Rights Reserved.

#include "PartyProjectCharacter.h"
#include "Camera/CameraComponent.h"
#include "Components/CapsuleComponent.h"
#include "Components/InputComponent.h"
#include "Engine/World.h"
#include "DodgeBall.h"
#include "GameFramework/Actor.h"
#include "Math/Vector2D.h"
#include "Math/Vector.h"
#include "Components/SphereComponent.h"
#include "UObject/Class.h"
#include "Components/SceneComponent.h"
#include "Kismet/GameplayStatics.h"
#include "Engine/EngineTypes.h"
#include "Kismet/KismetMathLibrary.h"
#include "Math/UnrealMathUtility.h"
#include "Components/ArrowComponent.h"
#include "GameFramework/PlayerController.h"
#include "Blueprint/WidgetLayoutLibrary.h"
#include "GameFramework/CharacterMovementComponent.h"
#include "GameFramework/Controller.h"
#include "GameFramework/SpringArmComponent.h"
#include "EnhancedInputComponent.h"
#include "EnhancedInputSubsystems.h"



ADodgeBall* ballRef;


//////////////////////////////////////////////////////////////////////////
// APartyProjectCharacter

APartyProjectCharacter::APartyProjectCharacter()
{
	/*{
		false,
		this->GetActorLocation(),
		this->GetActorRotation(),
		this->GetActorScale()

	};*/



	rotSpeedMultiplier = 20;
	// Set size for collision capsule
	GetCapsuleComponent()->InitCapsuleSize(42.f, 96.0f);

	// Don't rotate when the controller rotates. Let that just affect the camera.
	bUseControllerRotationPitch = false;
	bUseControllerRotationYaw = false;
	bUseControllerRotationRoll = false;

	// Configure character movement
	GetCharacterMovement()->bOrientRotationToMovement = true; // Character moves in the direction of input...	
	GetCharacterMovement()->RotationRate = FRotator(0.0f, 500.0f, 0.0f); // ...at this rotation rate

	// Note: For faster iteration times these variables, and many more, can be tweaked in the Character Blueprint
	// instead of recompiling to adjust them
	GetCharacterMovement()->JumpZVelocity = 700.f;
	GetCharacterMovement()->AirControl = 0.35f;
	GetCharacterMovement()->MaxWalkSpeed = 500.f;
	GetCharacterMovement()->MinAnalogWalkSpeed = 20.f;
	GetCharacterMovement()->BrakingDecelerationWalking = 2000.f;

	// Create a camera boom (pulls in towards the player if there is a collision)
	CameraBoom = CreateDefaultSubobject<USpringArmComponent>(TEXT("CameraBoom"));
	CameraBoom->SetupAttachment(RootComponent);
	CameraBoom->TargetArmLength = 400.0f; // The camera follows at this distance behind the character	
	CameraBoom->bUsePawnControlRotation = true; // Rotate the arm based on the controller

	// Create a follow camera
	FollowCamera = CreateDefaultSubobject<UCameraComponent>(TEXT("FollowCamera"));
	FollowCamera->SetupAttachment(CameraBoom, USpringArmComponent::SocketName); // Attach the camera to the end of the boom and let the boom adjust to match the controller orientation
	FollowCamera->bUsePawnControlRotation = false; // Camera does not rotate relative to arm

	dashForce = 2400.0f;
	DashCooldownDuration = 2.0f;
	LastDashTime = 0.0f;
	TimeSinceLastDash = 0.0f;
	MovementCooldownDuration = 1.5f;
	//dashHeightForce = 5000.0f;

	// Note: The skeletal mesh and anim blueprint references on the Mesh component (inherited from Character) 
	// are set in the derived blueprint asset named ThirdPersonCharacter (to avoid direct content references in C++)
}

void APartyProjectCharacter::BeginPlay()
{
	// Call the base class  
	Super::BeginPlay();
	LastDashTime -= DashCooldownDuration;
	TimeSinceLastDash -= MovementCooldownDuration;
	//	ADodgeBall* ball;
		//Add Input Mapping Context
	if (APlayerController* PlayerController = Cast<APlayerController>(Controller))
	{
		if (UEnhancedInputLocalPlayerSubsystem* Subsystem = ULocalPlayer::GetSubsystem<UEnhancedInputLocalPlayerSubsystem>(PlayerController->GetLocalPlayer()))
		{
			Subsystem->AddMappingContext(DefaultMappingContext, 0);
		}
	}

	playerHitBox = GetCapsuleComponent();
	playerHitBox->OnComponentBeginOverlap.AddDynamic(this, &APartyProjectCharacter::OnOverlap);
	playerHitBox->OnComponentEndOverlap.AddDynamic(this, &APartyProjectCharacter::OnOverlapEnded);

}

void APartyProjectCharacter::OnOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult)
{
	if (ADodgeBall* ball = Cast<ADodgeBall>(OtherActor))
	{

		isNearlBall = true;
		//GEngine->AddOnScreenDebugMessage(-1, 15.0f, FColor::Yellow, TEXT("Overlap Begin with ball"));
		ballRef = ball;
	}

}

void APartyProjectCharacter::OnOverlapEnded(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{

	if (ADodgeBall* ball = Cast<ADodgeBall>(OtherActor))
	{
		isNearlBall = false;
		//GEngine->AddOnScreenDebugMessage(-1, 15.0f, FColor::Yellow, TEXT("Overlap End with ball"));
	}
}

//////////////////////////////////////////////////////////////////////////
// Input

void APartyProjectCharacter::SetupPlayerInputComponent(class UInputComponent* PlayerInputComponent)
{
	// Set up action bindings
	if (UEnhancedInputComponent* EnhancedInputComponent = CastChecked<UEnhancedInputComponent>(PlayerInputComponent)) {

		//Jumping
		EnhancedInputComponent->BindAction(JumpAction, ETriggerEvent::Triggered, this, &ACharacter::Jump);
		EnhancedInputComponent->BindAction(JumpAction, ETriggerEvent::Completed, this, &ACharacter::StopJumping);

		//new actions
		EnhancedInputComponent->BindAction(playerMovementAction, ETriggerEvent::Triggered, this, &APartyProjectCharacter::Move);
		EnhancedInputComponent->BindAction(inputPickUpAction, ETriggerEvent::Triggered, this, &APartyProjectCharacter::PickUp);


		//Dash
		//EnhancedInputComponent->BindAction(inputDashAction, ETriggerEvent::Triggered, this, &PartyProjectCharacter::Dash);
		EnhancedInputComponent->BindAction(inputDashAction, ETriggerEvent::Triggered, this, &APartyProjectCharacter::Dash);

		// Moving
		//EnhancedInputComponent->BindAction(MoveAction, ETriggerEvent::Triggered, this, &APartyProjectCharacter::Move);

		//Looking
		EnhancedInputComponent->BindAction(LookAction, ETriggerEvent::Triggered, this, &APartyProjectCharacter::Look);
		EnhancedInputComponent->BindAction(aimAction_controller, ETriggerEvent::Triggered, this, &APartyProjectCharacter::AimBall_Controller);
		EnhancedInputComponent->BindAction(aimAction_Mouse, ETriggerEvent::Triggered, this, &APartyProjectCharacter::AimBall_Mouse);
	}
}

void APartyProjectCharacter::AimBall_Mouse(const FInputActionValue& Value)
{

	FVector WorldDir;
	FVector mouselocation, mousedirection;
	this->GetController<APlayerController>()->DeprojectMousePositionToWorld(mouselocation, mousedirection);

	//targetVector.Normalize();
	FHitResult hitR;
	const FName TraceTag("MyTraceTag");

	GetWorld()->DebugDrawTraceTag = TraceTag;
	FCollisionQueryParams CollisionParams;
	CollisionParams.TraceTag = TraceTag;

	WorldDir = mousedirection * 1000;
	WorldDir = mouselocation + WorldDir;
	hitR.TraceEnd = WorldDir;
	FCollisionQueryParams params(TraceTag);
	FVector ddd;
	ddd = GetComponentByClass<UStaticMeshComponent>()->GetComponentLocation();

	hitR.TraceStart = ddd;

	WorldDir.Z = 0;

	ActorLineTraceSingle(hitR, mouselocation, WorldDir, ECollisionChannel::ECC_WorldStatic, params);
	//DrawDebugLine(
	//	GetWorld(),
	//	mouselocation,
	//	hitR.Location,
	//	FColor(255, 0, 0),
	//	true, 15, 0,
	//	10
	//);


	FRotator wantedRot = UKismetMathLibrary::FindLookAtRotation(GetMesh()->GetComponentLocation(), WorldDir);

	wantedRot.Pitch = 0;
	wantedRot.Roll = 0;


	SetActorRotation(FMath::RInterpTo(playerCurrentRotation, wantedRot, FApp::GetDeltaTime(), rotSpeedMultiplier));
	GEngine->AddOnScreenDebugMessage(-1, 15.0f, FColor::Yellow, TEXT(" hitlocation : :" + hitR.Location.ToString()));
	GEngine->AddOnScreenDebugMessage(-1, 15.0f, FColor::Yellow, TEXT(" world dir: " + WorldDir.ToString()));



}


void APartyProjectCharacter::AimBall_Controller(const FInputActionValue& Value)
{
	FVector2D MovementVector = Value.Get<FVector2D>();
	FRotator playerCurrentRotation = GetActorRotation();
	FRotator targetRotation;
	FVector movement3DVector;
	movement3DVector.X = MovementVector.X;
	movement3DVector.Y = MovementVector.Y;
	movement3DVector.Normalize();

	double PV = movement3DVector.GetClampedToSize(0.0, 1).Length();



	isAiming = true;
	targetRotation = UKismetMathLibrary::MakeRotFromX(movement3DVector);
	SetActorRotation(FMath::RInterpTo(playerCurrentRotation, targetRotation, FApp::GetDeltaTime(), rotSpeedMultiplier));


	FRotator printRot = FMath::RInterpTo(playerCurrentRotation, targetRotation, FApp::GetDeltaTime(), rotSpeedMultiplier);

	GEngine->AddOnScreenDebugMessage(-1, 15.0f, FColor::Yellow, TEXT(" this :" + printRot.ToString()));
	GEngine->AddOnScreenDebugMessage(-1, 15.0f, FColor::Yellow, TEXT(" target rot :" + movement3DVector.ToString()));
	GEngine->AddOnScreenDebugMessage(-1, 15.0f, FColor::Yellow, TEXT(" length: :"));




}


void APartyProjectCharacter::PickUp()
{
	//logic for picking up the ball will go here
	if (isNearlBall && !CanMove() && !hasBall)
	{
		GEngine->AddOnScreenDebugMessage(-1, 15.0f, FColor::Yellow, TEXT("Trying to pick"));
		const FTransform socketTransform = GetMesh()->GetSocketTransform("s_weapon", ERelativeTransformSpace::RTS_World);

		FVector s(0, 0, 0);

		FAttachmentTransformRules rules(EAttachmentRule::SnapToTarget, EAttachmentRule::SnapToTarget, EAttachmentRule::KeepRelative, true);


		FActorSpawnParameters params;
		params.SpawnCollisionHandlingOverride = ESpawnActorCollisionHandlingMethod::AlwaysSpawn;
		params.Owner = this;
		//ballRef = GetWorld()->SpawnActor<ADodgeBall>(ballRef->GetClass(), socketTransform, params); // spawnaa mutta ei liitä
		//newBall->AttachToActor(this->GetParentActor(), FAttachmentTransformRules::SnapToTargetIncludingScale, "head");
		ballRef->OnPlayerPickUp();
		ballRef->AttachToComponent(this->GetMesh(), rules, "s_weapon");
		GEngine->AddOnScreenDebugMessage(-1, 15.0f, FColor::Yellow, (ballRef->GetName() + " <_Ball"));
		hasBall = true;
	}
	else if (hasBall)
	{
		ThrowBall();
	}

}



void APartyProjectCharacter::ThrowBall()
{
	FDetachmentTransformRules::KeepRelativeTransform;
	FVector fVec = GetActorForwardVector();

	ballRef->DetachFromActor(FDetachmentTransformRules::KeepRelativeTransform);
	ballRef->GetThrown(fVec);
	hasBall = false;

}

void APartyProjectCharacter::Move(const FInputActionValue& Value)
{
	// input is a Vector2D
	if (!CanMove()) {

		FVector2D MovementVector = Value.Get<FVector2D>();

		if (Controller != nullptr)
		{
			// find out which way is forward

			const FRotator Rotation = Controller->GetControlRotation();
			const FRotator YawRotation(0, Rotation.Yaw, 0);
			const FRotator nullRotator(0, 0, 0);

			if (isAiming)
			{
				const FVector ForwardDirection = FRotationMatrix(nullRotator).GetUnitAxis(EAxis::X);

				// get right vector 
				const FVector RightDirection = FRotationMatrix(nullRotator).GetUnitAxis(EAxis::Y);

				AddMovementInput(ForwardDirection, MovementVector.Y);
				AddMovementInput(RightDirection, MovementVector.X);
			}
			else
			{

				const FVector ForwardDirection = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);

				// get right vector 
				const FVector RightDirection = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::Y);
				AddMovementInput(ForwardDirection, MovementVector.Y);
				AddMovementInput(RightDirection, MovementVector.X);

			}

			// get forward vector

			// add movement 
	/*		AddMovementInput(ForwardDirection, MovementVector.Y);
			AddMovementInput(RightDirection, MovementVector.X);



			AddMovementInput(ForwardDirection, MovementVector.Y);
			AddMovementInput(RightDirection, MovementVector.X);*/


		}
	}
}

void APartyProjectCharacter::Look(const FInputActionValue& Value)
{
	// input is a Vector2D
	FVector2D LookAxisVector = Value.Get<FVector2D>();

	if (Controller != nullptr)
	{
		// add yaw and pitch input to controller
		AddControllerYawInput(LookAxisVector.X);
		AddControllerPitchInput(LookAxisVector.Y);
	}
}

void APartyProjectCharacter::Dash() {
	//dashes player towards the direction it's facing
	if (!CanDash()) {


		FRotator Rotation = GetActorRotation();
		FVector DashDirection = Rotation.Vector();
		DashDirection.Normalize();
		FVector LaunchVelocity = DashDirection * dashForce;
		GetCharacterMovement()->Launch(LaunchVelocity);
		LastDashTime = GetWorld()->GetTimeSeconds();
	}

}

bool APartyProjectCharacter::CanDash() {
	//dash cooldown to dash again
	float CurrentTime = GetWorld()->GetTimeSeconds();
	TimeSinceLastDash = CurrentTime - LastDashTime;
	return TimeSinceLastDash < DashCooldownDuration;




}
bool APartyProjectCharacter::CanMove() {
	//Cooldown for moving after using dash
	float CurrentTime = GetWorld()->GetTimeSeconds();
	TimeSinceLastDash = CurrentTime - LastDashTime;
	return TimeSinceLastDash < MovementCooldownDuration;
}

